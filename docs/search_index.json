[
["index.html", "Data Science Handbook Welcome", " Data Science Handbook MSc J. Manuel Magana A., PhD Alberto Dorantes 2018-11-04 Welcome Welcome to the ‘Data Science Handbook’ project. This is the very first version of a collection of notes aimed to capture the basics of the methods and techniques in the areas of Predictive Analytics and Data Science. We focus on the domains of Finance and Econometrics and employ R as programming language to code our sample scripts. "],
["part-i-introduction.html", "1 Part I - Introduction 1.1 A short introduction to Data Science and R", " 1 Part I - Introduction 1.1 A short introduction to Data Science and R There is not a formal definition for Data Science, however it can be seen as the intersection between statistics, computer science and any knowledge domain that demands analysis of big volumes of information such as Banking, Finance, Economics, Genomics, Astronomics, etc. Data Science implies not only the extraction, preparation and analysis of massive data sets but also covers statistical modeling and data visualization tools that provide the business with more and better insights. Successful data-driven companies apply Data Science to manage their business every day. Those organisations combine a variety of internal and external data sources in an analytics engine, translate the information into quantifiable and actionable insights to do real-time decision making that impact every level of the organization. As you can imagine, in order to achive this, companies have to make use of computers and programs that leverage the power of what we now call Machine learning algorithms, which is what this book is about, however in order to discuss the basics of those algorithms, we will need first to review the fundamentals of Statistics and computer programming. In order to get a computer to do something, you have to tell it what you want in a series of instructions. These series of instructions are what we call a computer program. In the same way that we, humans, communicate with each other using a specific language such as English, Spanish or French, computers also communicate (unconsciously) with other computers and human beings through the use of a programming language. All computer programs are written in a programming language. Programming languages vary a lot, and there are many of them, some are more intuitive than others, and not all of them serve the same purpose. For example, some programming languages such as PHP are ideal to create dynamic web pages, some others like C and C++ are great for robotics and to automate industrial processes, while others are better to create quantitative algorithms for Statistics, Finance and Economics, the language we will use in this text is one of those and is named R. R is one the more popular programming languages in Data Science, the other one worth to learn is Python. Both are open and free software, which means you can create, modify and share any program coded in those languages for free. There is no need to pay any license fee. R is a modern implementation of another computer language named S, in other words, S is the predecesor of R. The S language was developed by John Chambers and others at the Bell Laboratories, the historic laboratory created by Alexander Graham Bell in the 19th century as a research and scientific development company. During most the 20th century the Bell Labs formed part of AT&amp;T until 1996, when it was owned by Alcatel-Lucetel which was later acquired by Nokia in 2016. The first version of S was created in 1976, it was aimed to be a statistical computing language with a more interactive approach than other existing languages such as Fortran, developed by IBM. Ross Ihaka and Robert Gentleman, both Professors of Statistics at the University of Auckland in New Zealand, started working in the very first version of R in 1992, it took three years of work to release the first functional version in 1995. Nowadays, the most fundamental R packages are maintained and updated by a group of developers called the R Development Core Team, of which John Chambers is a member. R works in a package framework, every package comes with a number of functions that you can use, modify and improve. That means that there are certain base packages such as stats,graphics, utils, Matrix, boot and codetools that provide you with the basic R functions. All the base packages are mantained by the R Development Core Team, however there are many other interesting packages developed by other people, mainly by Research Professors, that you can download and use freely. To clarify, the base packages are what you get when you download R the first time, however all the other packages are also available for you. We will explain how to do this in the next workshop. This package framework is exactly what makes R so popular and highly extensible! As mentioned before, R includes a variety of packages for statistical analysis, linear and nonlinear modelling, classical statistical tests, etc. It also provides a mean for time-series analysis and packages that will allow your to explore the basics of Machine Learning such as classification and clustering analysis. R is also very powerful in terms of data visualisation and graphics. The ggplot package is an example of this. "],
["statistics.html", "2 Part II - Statistics 2.1 Basic Statistics 2.2 Normal Distribution 2.3 Hypothesis testing 2.4 Linear regression 2.5 Introduction to Time Series", " 2 Part II - Statistics Work in progress 2.1 Basic Statistics Work in progress 2.2 Normal Distribution The std deviation of normal distribution variable is… Work in progress 2.3 Hypothesis testing Work in progress 2.4 Linear regression Work in progress 2.5 Introduction to Time Series "],
["ML.html", "3 Part III - Machine Learning 3.1 Multiple regression 3.2 Multicollinearity 3.3 Logistic regression 3.4 Cross Validation 3.5 Decision Trees 3.6 Resampling methods: Bootstrapping &amp; Bagging 3.7 Support Vector Machines 3.8 Clustering Methods 3.9 Dimension Reduction Methods", " 3 Part III - Machine Learning Work in progress 3.1 Multiple regression Work in progress 3.2 Multicollinearity 3.3 Logistic regression Logistic regression is a useful tool to model the probability of the dependent variable to belong to a particular (binary) category. Thus, logistic regression is part of the group of techniques typically used for classification problems. More formally, logistic regression models the relationship between \\(p(X) = Pr(Y=1|X)\\), where \\(p(X)\\) denotes the probability for \\(Y\\) to be True given a specific value of \\(X\\). In classification problems we are interested on predicting whether an event will happen or not, if an individual belogs to group A or group B, or whether the market will move downward or upward. All those are examples of binary classification problems for which we need a mathematical function which output ranges between 0 and 1 for all the domain of \\(X\\). In other words, regardless the value of \\(X\\) the output value of \\(f\\) is always a number between 0 and 1. You might wonder why not to use linear regression for classification problems. Remember that for linear regression \\(p(X)\\) is defined as \\(p(X) = {\\beta_0} + {\\beta_1} X\\) which is of little help to make predictions about the category of a variable given that it’s codomain includes all the real numbers \\(\\mathbb{R}\\) from \\(-{\\infty}\\) to \\({\\infty}\\). That is \\(f: \\mathbb{R} \\mapsto \\mathbb{R}\\). How would you interpret a negative probability? What would be the meaning of a very large probability number such as 9000%? There are several function that satisfy the condition \\(f: \\mathbb{R} \\mapsto (0,1)\\) however linear regression is not one of them. One of the functions that satisfy the condition \\(f: \\mathbb{R} \\mapsto (0,1)\\) is the logistic function defined below: \\[p(X) = \\frac{e^{{\\beta_0} + {\\beta_1} X}}{1+e^{{\\beta_0} + {\\beta_1} X}}\\] , which can also be expressed as follows: \\[\\frac{p(X)}{1-p(X)} = e^{{\\beta_0} + {\\beta_1} X}\\] The left side of the equation above is also known as the odds of the event. The odds describe the likeliness for an event to occur and can take any value from zero to infinite. An odds value close to zero indicates that the event is very unlikely to happen, the higher the odds value the higher the likeliness for the event to happen. The likeliness of the odds is not exactly the same as the probability for the event to happen, remember that probability is denoted by \\(p(X)\\) and lies between 0 and 1. For example, let’s say that the probability \\(p(X)\\) for a medical diagnostic to be correct is 80%, this will imply an odds value of 4 given that \\(\\frac{0.8}{1-0.8} = 4\\). In other words, 8 in 10 people with an odds of 4 will receive the correct diagnostic. As the reader can conclude from the plot below, in general any odds value higher than 10 suggests a very high probability for the event to accur. par(las = 1) plot(x = seq(from = 0, to = 1, by = 0.05), y = seq(from = 0, to = 1, by = 0.05)/(1-seq(from = 0, to = 1, by = 0.05)), ylim = range(0:20), main = &#39;Probability vs Odds&#39;, xlab = &#39;Probability p(X)&#39;, ylab = &#39;Odds&#39;, type = &#39;b&#39;, pch = 21, bg=&quot;blue&quot;, panel.first = grid(lty = 1)) Applying the logarithm to the logistic function we obtain the log-odds function also known as logit. This function is linear in \\(X\\). \\[\\log\\frac{p(X)}{1-p(X)} = {\\beta_0} + {\\beta_1} X\\] The linear relationship between the log-odds and \\(X\\) means that a one-unit increase in \\(X\\) is associated with an increase in the log-odds by \\({\\beta_1}\\) units. 3.4 Cross Validation Work in progress 3.5 Decision Trees Work in progress 3.6 Resampling methods: Bootstrapping &amp; Bagging Work in progress 3.7 Support Vector Machines Work in progress 3.8 Clustering Methods Work in progress 3.9 Dimension Reduction Methods Work in progress "],
["DSapps.html", "4 Part IV - Data Science applications 4.1 Introduction to Big Data Applications 4.2 Databases, Datawarehousing &amp; Data Lakes 4.3 Introduction to Data Visualisation", " 4 Part IV - Data Science applications Work in progress 4.1 Introduction to Big Data Applications Work in progress 4.2 Databases, Datawarehousing &amp; Data Lakes Work in progress 4.3 Introduction to Data Visualisation Work in progress "],
["Annex.html", "5 Part V - Annex 5.1 Setting up R and RStudio", " 5 Part V - Annex Work in progress 5.1 Setting up R and RStudio 5.1.1 Setting up R Follow the steps below to complete the installation of R. Go to the website of The Comprehensive R Archive Network at https://cran.r-project.org/ where the latest version of R is available. At the moment of writing this document the latest version is R-3.4.1 for Windows and Mac. Find the link and download to the appropriate binary setup file for your operating system (Windows or Mac). Current binary versions of R run on Windows 7 or later, including on 64-bit versions. Windows XP is no longer supported. Open the downloaded .exe file and Install R. I suggest to accept the standard installation. 5.1.2 Setting up RStudio RStudio is not a programming language, but an integrated development environment (IDE) for R. In other words, RStudio is the place where you will create your computer programs using the R language so the computer can read and execute your instructions. Before installing RStudio it is important to make sure that you have completed the installation of R in your computer, otherwise you could not use RStudio functionally. Here are some simple steps to follow to complete the installation of RStudio: Go to the webpage https://www.rstudio.com/products/RStudio/ where you will find the latest version of the software. At the moment of writing this document the latest version is RStudio 1.0.153. Scroll down to the butom of the page and find the list of Installers for Supported Platforms. Find the appropriate installer file for your operating system (Windows or Mac) and download it. Once the download has been completed run the .exe file. Proceed with the standard installation. It is advised to reboot your computer once the installation has been completed. 5.1.3 Working in RStudio Once you have completed the installations, you can open RStudio as any other application in your computer. The predefined view includes some internal windows called panes. There are three panes setted up by default: The Console. The Enviroment and History. The Files, Plots, Packages and Help pane. There is a fourth pane that we will introduce later, the R script and data view window. Predefined view of R Studio "]
]
